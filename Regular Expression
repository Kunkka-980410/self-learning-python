正则表达式（Regular Expression）是一种用于匹配字符串模式的强大工具，尤其在文本处理、数据清洗、日志分析等场景中非常有用。Python 中通过内置的 re 模块来使用正则表达式。

🧠 正则表达式的核心概念
正则表达式是一种小型语言，用来描述字符串的结构。你可以用它来：

检查字符串是否符合某种格式（如邮箱、手机号）

提取字符串中的特定内容（如日期、数字）

替换或分割字符串中的内容
✅ 常用语法速查表

|表达式|	含义|
|:---|:---|:---|
|.|	匹配任意字符（除换行符）|
|\d|	匹配数字（0-9）|
|\w|	匹配字母、数字或下划线|
|\s|	匹配空白字符（空格、换行等）|
|^|	匹配字符串开头|
|$|	匹配字符串结尾|
|*|	匹配前一个字符零次或多次|
|+|	匹配前一个字符一次或多次|
|?|	匹配前一个字符零次或一次|
|{n}|	匹配前一个字符恰好 n 次|
|{n,m}|	匹配前一个字符 n 到 m 次|
|[]|	匹配字符集合，如 [abc] 匹配 a、b 或 c|
|[^...]|	匹配不在集合中的字符|
|`|	`|	或操作，如 `cat	dog` 匹配 cat 或 dog|
|()|	分组，提取匹配内容|


```python
import re
# 匹配手机号
pattern = r"^1[3-9]\d{9}$"
phone = "13812345678"
print(re.match(pattern, phone))  # 输出：<re.Match object...>

# 提取所有数字
text = "价格是：￥88，折扣后是￥66"
numbers = re.findall(r"\d+", text)
print(numbers)  # 输出：['88', '66']

# 替换邮箱域名
email = "user@example.com"
new_email = re.sub(r"@.*", "@newdomain.com", email)
print(new_email)  # 输出：user@newdomain.com
```
